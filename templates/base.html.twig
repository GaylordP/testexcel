<!doctype html>
<html lang="fr">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>
        {{ block('title') }}
    </title>
    {% block stylesheets %}
        {{ encore_entry_link_tags('app') }}
    {% endblock %}
  </head>
  <body>
    <div class="container">
        <h1 class="h2">
            {{ block('title') }}
        </h1>
        {% block body %}{% endblock %}
        <div class="card mt-3 mb-3">
            <h2 class="card-header card-title h6">
                Installation :
            </h2>
            <div class="card-body">
                <ul class="mb-0">
                    <li>
                        <code>
                            composer install
                        </code>
                    </li>
                    <li>
                        <code>
                            npm install
                        </code>
                    </li>
                    <li>
                        <code>
                            npm run dev
                        </code>
                        ou équivalent
                    </li>
                </ul>
            </div>
        </div>
        <div class="card mt-3 mb-3">
            <h2 class="card-header card-title h6">
                Tests :
            </h2>
            <div class="card-body">
                <h3 class="h6">
                    Préamble :
                </h3>
                <p>
                    Les erreurs sont bien retournées en JSON à l'aide de deux classes que j'ai créé : <code>App/Exception/HttpJsonException</code> et <code>App/EventListener/ExceptionListener</code>.
                </p>
                <h3 class="h6">
                    Commande :
                </h3>
                <ul>
                    <li>
                        <code>
                            ./vendor/bin/phpunit
                        </code>
                    </li>
                </ul>
                <h3 class="h6">
                    Tests réalisés :
                </h3>
                <ul class="mb-0">
                    <li>
                        Un fichier excel vide ;
                    </li>
                    <li>
                        Un fichier excel avec des valeurs négatives ;
                    </li>
                    <li>
                        Un fichier excel sans titre mais avec des notes ;
                    </li>
                    <li>
                        Un fichier excel avec titre mais sans note ;
                    </li>
                    <li>
                        Un fichier excel avec des notes invalides (<code>string</code>) ;
                    </li>
                    <li>
                        Un fichier excel valide ;
                    </li>
                    <li>
                        Un fichier non excel.
                    </li>
                </ul>
            </div>
        </div>
        <div class="card mt-3 mb-3">
            <h2 class="card-header card-title h6">
                Choix personnels :
            </h2>
            <div class="card-body">
                <h3 class="h6">
                    Technologies utilisées :
                </h3>
                <ul>
                    <li>
                        Symfony 5 ;
                    </li>
                    <li>
                        Webpack Encore ;<br>
                        <small>
                            Sass activé
                        </small>
                    </li>
                    <li>
                        Bootstrap 5 ;
                    </li>
                    <li>
                        PhpSpreadsheet.
                    </li>
                </ul>
                <h3 class="h6">
                    Commentaires :
                </h3>
                <ul class="mb-0">
                    <li>
                        Je ne me suis pas attardé sur le front et l'affichage ;
                    </li>
                    <li>
                        Un seul environnement créé (<code>dev</code>) y compris pour les tests. En situation réelle, il y en aurait au moins trois (<code>dev</code>/<code>test</code>/<code>prod</code>) voir <code>benchmark</code> en plus ;
                    </li>
                    <li>
                        Idéalement, dans un projet réel, les textes seraient isolés pour être traductible (Symfony Translation si Twig, i18next si React) ;
                    </li>
                    <li>
                        Je n'aurais pas défini le label dans le constructeur de <code>AbstractQuestion</code> mais plutôt à l'aide d'un <code>setLabel()</code>, car devoir créer une variable <code>$questionLabel = null;</code> (ligne 27 de <code>App/Service/QuestionExcelReader</code>) pour la définir ensuite m'a un peu dérangé. J'aurais préféré instancier l'objet <code>Question</code> en amont puis appeler un <code>setLabel()</code> à la ligne 34. Je sais que j'aurais pu directement instancier l'objet à la ligne 34 mais ça ne m'aurait pas non plus satisfait.
                    </li>
                    <li>
                        Léger doute sur les deux <code>trim()</code> à la ligne 34 de <code>App/Service/QuestionExcelReader</code>, je ne connais pas les différentes possibilités de titre. En situation réelle, j'aurais probablement utilisé une expression régulière en fonction des instructions.
                    </li>
                    <li>
                        Je n'aurais pas exposé <code>getMin()/Max/Mean</code> en public puisque vous souhaitez un sous-tableau "statistics".
                        <br>
                        De fait, je dois les supprimer manuellement dans <code>App/Normalizer/QuestionExcelReader</code> à la ligne 27.
                    </li>
                    <li>
                        En situation réelle et sous réserve d'approbation, j'aurais créé dans <code>AbstractQuestion</code> des <code>addValue()</code>/<code>getValues()</code> pour retrouver toutes les notes.
                        <br>
                        Ici j'ai « simplifié » à l'aide d'un <code>setValue()</code> à la ligne 61 de <code>App/Service/QuestionExcelReader</code>.
                        <br>
                        Des <code>addValue()</code> directement à la ligne 43 du même fichier aurait été top, mais avec mon commentaire ci-dessus à propos du label ça perdait un peu de son intérêt.
                    </li>
                    <li>
                        En situation réelle et selon les instructions, le nombre de feuilles Excel aurait été testé.
                    </li>
                </ul>
            </div>
        </div>
    </div>
  </body>
</html>