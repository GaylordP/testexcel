<!doctype html>
<html lang="fr">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>
        {{ block('title') }}
    </title>
    {% block stylesheets %}
        {{ encore_entry_link_tags('app') }}
    {% endblock %}
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                ADriver
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Fermer">
                <span class="navbar-toggler-icon"></span>
            </button>
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a
                        class="nav-link {% if 'index' == app.request.get('_route') %} active{% endif %}"
                        {% if 'index' == app.request.get('_route') %} aria-current="page"{% endif %}
                        href="{{ path('index') }}"
                    >
                        Accueil
                    </a>
                </li>
                <li class="nav-item">
                    <a
                        class="nav-link {% if 'new' == app.request.get('_route') %} active{% endif %}"
                        {% if 'new' == app.request.get('_route') %} aria-current="page"{% endif %}
                        href="{{ path('new') }}"
                    >
                        Ajouter un article
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/api">
                        Api
                    </a>
                </li>
            </ul>
        </div>
    </nav>
    <div class="container">
        <h1 class="h2">
            {{ block('title') }}
        </h1>
        {% block body %}{% endblock %}
        <div class="card mt-3 mb-3">
            <h2 class="card-header card-title h6">
                Installation :
            </h2>
            <div class="card-body">
                <ul class="mb-0">
                    <li>
                        <code>
                            php bin/console doctrine:database:create
                        </code>
                    </li>
                    <li>
                        <code>
                            php bin/console d:s:u --force
                        </code>
                    </li>
                </ul>
            </div>
        </div>
        <div class="card mt-3 mb-3">
            <h2 class="card-header card-title h6">
                Tests :
            </h2>
            <div class="card-body">
                <ul class="mb-0">
                    <li>
                        <code>
                            php bin/console doctrine:fixtures:load
                        </code>
                    </li>
                    <li>
                        <code>
                            ./vendor/bin/phpunit
                        </code>
                    </li>
                </ul>
            </div>
        </div>
        <div class="card mt-3 mb-3">
            <h2 class="card-header card-title h6">
                Ressenti personnel :
            </h2>
            <div class="card-body">
                <p>
                    Devoir repartir d'un projet totalement à zéro prend un temps considérable peut-être un peu inutile, notamment par l'installation de chacun des composants et surtout la mise en place des principaux éléments front.
                </p>
                <p>
                    Dans un projet réel, énormément de composants front (les éléments Twig/React, les fonctions javascript d'appels aux API et la gestion des erreurs) sont isolés : les isoler prend du temps en amont, mais en fait gagner énormément sur le long terme. Vu qu'il s'agit d'un projet "neuf", de fait, on se retrouve à accorder beaucoup de temps à ces éléments basiques.
                </p>
                <p>
                    J'ai bien compris qu'il ne fallait pas s'attarder sur le front mais il est malgré tout nécessaire (loader, affichage des erreurs, requêtes et traitement de leurs retours en JS, etc.).
                </p>
                <p class="mb-0">
                    Il aurait fallu plus de temps pour mettre en place tous les éléments idéaux (certains détaillés ci-après) mais nécessaire à un projet pleinement fonctionnel. Paradoxalement, une fois pleinement fonctionnel, doubler les fonctionnalités (ajouter des catégories aux articles par exemple ou des droits d'accès) serait très rapide, ce qui illustre un peu mon propos sur le temps un peu inutile nécessaire en amont pour commencer à vraiment utiliser un projet.
                </p>
            </div>
        </div>
        <div class="card mt-3 mb-3">
            <h2 class="card-header card-title h6">
                Choix personnels :
            </h2>
            <div class="card-body">
                <h3 class="h6">
                    Technologies utilisées :
                </h3>
                <ul>
                    <li>
                        Symfony 5 ;
                    </li>
                    <li>
                        Webpack Encore ;<br>
                        <small>
                            Sass et JSX activés
                        </small>
                    </li>
                    <li>
                        Bootstrap 5 ;
                    </li>
                    <li>
                        React JS ;
                    </li>
                    <li>
                        Axios pour les requêtes ;
                    </li>
                    <li>
                        date-fns pour les dates.
                    </li>
                </ul>
                <h3 class="h6">
                    Commentaires :
                </h3>
                <ul class="mb-0">
                    <li>
                        Au vu du temps accordé et disponible, je ne me suis pas attardé sur le front et l'affichage ;
                    </li>
                    <li>
                        Au vu du temps accordé et disponible, un seul environnement créé (<code>dev</code>) y compris pour les tests. En situation réelle, il y en aurait au moins trois (<code>dev</code>/<code>test</code>/<code>prod</code>) avec l'utilisation des migrations en production ;
                    </li>
                    <li>
                        Utilisation de Sqlite pour vous éviter de créer une base de données MySQL inutilement ;
                    </li>
                    <li>
                        Impossible d'utiliser <code>ramsey/uuid-doctrine</code> sans accès MySQL. Dans un projet réel je n'aurais jamais utilisé des ID mais des UUID ;
                    </li>
                    <li>
                        Idéalement, dans un projet réel et sous réserve d'approbation, je n'aurais pas utilisé Twig mais exclusivement React JS ;
                        <br>
                        <small>
                            (Sinon du Javascript/JSX natif, ou au pire jQuery)
                        </small>
                    </li>
                    <li>
                        Idéalement, dans un projet réel, les textes seraient isolés pour être traductible (Symfony Translation si Twig, i18next si React) ;
                    </li>
                    <li>
                        Parfois, les composants React ne sont pas isolés car l'intérêt est minime ici (exemple : <code>Row</code> dans <code>/assets/App/IndexScreen</code>) : jamais je n'aurais fait ça en situation réelle.
                        <br>
                        <small>
                            (Comme en Twig : je fais toujours hériter les éléments principaux d'un parent (Boutons, Titres / Icônes).)
                        </small>
                    </li>
                    <li>
                        Même remarque pour les requêtes à l'API (exemple : requête axios dans <code>/assets/App/IndexScreen</code>). Dans un projet réel elles seraient isolées et les résultats transmis à un <code>reducer</code> via <code>useContext()</code> pour éviter de refaire les requêtes à chaque actualisation et économiser des ressources.
                    </li>
                    <li>
                        Composant <code>Slugger</code> uniquement en <code>prePersist</code> car aucune modification d'article souhaité ;
                    </li>
                    <li>
                        Il y a bien un loader au chargement des données dans l'index (le chargement des données est trop rapide ici pour être perceptible) ;
                        <br>
                        <small>
                            Pas de loader pour l'ajout/suppression, le manque de temps m'imposait de prioriser. En temps normal, après le clic je récupère le texte du boutton, qui est remplacé par un loader, lequel disparait à la fin du chargement (erreur ou non).
                        </small>
                    </li>
                    <li>
                        Suppression :
                        <ul>
                            <li>
                                En situation réelle, je demande toujours une confirmation avant suppression ;
                            </li>
                            <li>
                                En situation réelle, je ne supprime jamais les données mais j'utilise des champs <code>deletedAt</code>/<code>deletedBy</code>.
                            </li>
                        </ul>
                    </li>
                    <li>
                        En situation réel, JEST serait utilisé pour les tests front/React.
                    </li>
                </ul>
            </div>
        </div>
    </div>
    {% block javascripts %}
        {{ encore_entry_script_tags('app') }}
    {% endblock %}
  </body>
</html>